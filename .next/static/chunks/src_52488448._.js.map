{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Eidsheim/Kopi%20av%20driftig%2010.04.25/.ssh/driftig/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''\r\n\r\nconsole.log('Supabase URL:', supabaseUrl)\r\nconsole.log('Supabase Anon Key:', supabaseAnonKey ? 'Set' : 'Not set')\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  console.error('Supabase credentials are not set correctly in environment variables')\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\r\n\r\nexport async function fetchTimeEntriesByEmployeeId(employeeId: string) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('time_entries')\r\n      .select('*')\r\n      .eq('employee_id', employeeId)\r\n      .order('date', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error fetching time entries:', error);\r\n      return [];\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Unexpected error fetching time entries:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function updateTimeEntry(entryId: string, updatedFields: Record<string, any>) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('time_entries')\r\n      .update(updatedFields)\r\n      .eq('id', entryId);\r\n\r\n    if (error) {\r\n      console.error('Error updating time entry:', error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Unexpected error updating time entry:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Lager-funksjoner\r\n\r\n// Hent lagerdata og returner som et objekt { impregnert_staur: antall, ... }\r\nexport async function fetchLager(): Promise<Record<string, number>> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('lager')\r\n      .select('navn, antall')\r\n\r\n    if (error) {\r\n      console.error('Error fetching lager:', error)\r\n      return {}\r\n    }\r\n    // Map til { key: antall }\r\n    const lagerObj: Record<string, number> = {}\r\n    data?.forEach((row: { navn: string; antall: number }) => {\r\n      let key = row.navn.toLowerCase().replaceAll(' ', '_').replaceAll('å', 'a').replaceAll('æ', 'ae').replaceAll('ø', 'o')\r\n      lagerObj[key] = row.antall\r\n    })\r\n    return lagerObj\r\n  } catch (error) {\r\n    console.error('Unexpected error fetching lager:', error)\r\n    return {}\r\n  }\r\n}\r\n\r\n// Oppdater lagerdata basert på form-objektet { impregnert_staur: antall, ... }\r\nexport async function updateLager(form: Record<string, number>) {\r\n  try {\r\n    // Hent eksisterende rader\r\n    const { data: existing, error: fetchError } = await supabase\r\n      .from('lager')\r\n      .select('id, navn')\r\n    if (fetchError) {\r\n      console.error('Error fetching lager for update:', fetchError)\r\n      return\r\n    }\r\n    // Oppdater eller opprett for hver vare\r\n    for (const [key, antall] of Object.entries(form)) {\r\n      // Finn navn fra key\r\n      let navn = key\r\n        .replaceAll('_', ' ')\r\n        .replaceAll('ae', 'æ')\r\n        .replaceAll('o', 'ø')\r\n        .replaceAll('a', 'å')\r\n      // Søk etter eksisterende rad\r\n      const existingRow = existing?.find((row: { navn: string }) => row.navn.toLowerCase().replaceAll(' ', '_') === key)\r\n      if (existingRow) {\r\n        // Oppdater\r\n        await supabase.from('lager').update({ antall: Number(antall) }).eq('id', existingRow.id)\r\n      } else {\r\n        // Sett inn ny\r\n        await supabase.from('lager').insert([{ navn, antall: Number(antall) }])\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Unexpected error updating lager:', error)\r\n  }\r\n}\r\n\r\n// Hent lagerhistorikk (transaksjoner) med varenavn\r\nexport async function fetchLagerHistorikk(): Promise<Array<{\r\n  created_at: string;\r\n  navn: string;\r\n  type: string;\r\n  antall: number;\r\n  kommentar: string;\r\n}>> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('lager_transactions')\r\n      .select('created_at, type, antall, kommentar, lager_id, lager:lager_id(navn)')\r\n      .order('created_at', { ascending: false })\r\n      .limit(100)\r\n    if (error) {\r\n      console.error('Error fetching lager historikk:', error)\r\n      // Log the full error object for debugging\r\n      if (typeof window !== 'undefined') {\r\n        (window as any).__supabaseLagerHistorikkError = error;\r\n      }\r\n      return []\r\n    }\r\n    // Map til flat struktur med varenavn\r\n    return (data || []).map((row: any) => ({\r\n      created_at: row.created_at,\r\n      navn: row.lager?.navn || '',\r\n      type: row.type,\r\n      antall: row.antall,\r\n      kommentar: row.kommentar || ''\r\n    }))\r\n  } catch (error) {\r\n    console.error('Unexpected error fetching lager historikk:', error)\r\n    return []\r\n  }\r\n}\r\n\r\n// Registrer en lagertransaksjon (inntak/uttak/manuell) og oppdater lagerbeholdning\r\nexport async function registerLagerTransaksjon({ key, type, antall, kommentar }: { key: string, type: 'inntak' | 'uttak' | 'manuell', antall: number, kommentar: string }) {\r\n  try {\r\n    // Finn varenavn fra key\r\n    let navn = key.replaceAll('_', ' ').replaceAll('ae', 'æ').replaceAll('o', 'ø').replaceAll('a', 'å')\r\n    // Hent rad for varen\r\n    let lagerId: number | null = null;\r\n    let nyttAntall: number = 0;\r\n    const { data: lagerRows, error: lagerError } = await supabase\r\n      .from('lager')\r\n      .select('id, antall')\r\n      .eq('navn', navn)\r\n      .limit(1)\r\n    if (!lagerRows || lagerRows.length === 0) {\r\n      if (type === 'manuell') {\r\n        // Opprett ny vare hvis manuell\r\n        const { data: insertData, error: insertError } = await supabase\r\n          .from('lager')\r\n          .insert([{ navn, antall: Number(antall) }])\r\n          .select('id')\r\n          .single();\r\n        if (insertError || !insertData) {\r\n          return { error: 'Kunne ikke opprette ny vare' }\r\n        }\r\n        lagerId = insertData.id;\r\n        nyttAntall = Number(antall);\r\n      } else {\r\n        return { error: 'Fant ikke varen i lageret' }\r\n      }\r\n    } else {\r\n      lagerId = lagerRows[0].id;\r\n      nyttAntall = lagerRows[0].antall;\r\n      if (type === 'inntak') {\r\n        nyttAntall += antall;\r\n      } else if (type === 'uttak') {\r\n        if (lagerRows[0].antall < antall) {\r\n          return { error: 'Ikke nok på lager for uttak' }\r\n        }\r\n        nyttAntall -= antall;\r\n      } else if (type === 'manuell') {\r\n        nyttAntall = antall;\r\n      }\r\n      // Oppdater lagerbeholdning for alle typer\r\n      const { error: updateError } = await supabase\r\n        .from('lager')\r\n        .update({ antall: nyttAntall })\r\n        .eq('id', lagerId)\r\n      if (updateError) {\r\n        return { error: 'Kunne ikke oppdatere lagerbeholdning' }\r\n      }\r\n    }\r\n    // Registrer transaksjon ALLTID\r\n    const { error: transError } = await supabase\r\n      .from('lager_transactions')\r\n      .insert({ lager_id: lagerId, type, antall, kommentar })\r\n    if (transError) {\r\n      return { error: 'Kunne ikke registrere transaksjon' }\r\n    }\r\n    return { success: true }\r\n  } catch (error) {\r\n    return { error: 'Uventet feil ved registrering' }\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;AAEoB;AAFpB;;AAEA,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,wPAA6C;AAErE,QAAQ,GAAG,CAAC,iBAAiB;AAC7B,QAAQ,GAAG,CAAC,sBAAsB,uCAAkB;AAEpD,uCAAsC;;AAEtC;AAEO,MAAM,WAAW,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAE3C,eAAe,6BAA6B,UAAkB;IACnE,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,gBACL,MAAM,CAAC,KACP,EAAE,CAAC,eAAe,YAClB,KAAK,CAAC,QAAQ;YAAE,WAAW;QAAM;QAEpC,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO,EAAE;QACX;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO,EAAE;IACX;AACF;AAEO,eAAe,gBAAgB,OAAe,EAAE,aAAkC;IACvF,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,gBACL,MAAM,CAAC,eACP,EAAE,CAAC,MAAM;QAEZ,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO;QACT;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO;IACT;AACF;AAKO,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,SACL,MAAM,CAAC;QAEV,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,CAAC;QACV;QACA,0BAA0B;QAC1B,MAAM,WAAmC,CAAC;QAC1C,MAAM,QAAQ,CAAC;YACb,IAAI,MAAM,IAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,MAAM,UAAU,CAAC,KAAK;YACjH,QAAQ,CAAC,IAAI,GAAG,IAAI,MAAM;QAC5B;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,CAAC;IACV;AACF;AAGO,eAAe,YAAY,IAA4B;IAC5D,IAAI;QACF,0BAA0B;QAC1B,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,SACjD,IAAI,CAAC,SACL,MAAM,CAAC;QACV,IAAI,YAAY;YACd,QAAQ,KAAK,CAAC,oCAAoC;YAClD;QACF;QACA,uCAAuC;QACvC,KAAK,MAAM,CAAC,KAAK,OAAO,IAAI,OAAO,OAAO,CAAC,MAAO;YAChD,oBAAoB;YACpB,IAAI,OAAO,IACR,UAAU,CAAC,KAAK,KAChB,UAAU,CAAC,MAAM,KACjB,UAAU,CAAC,KAAK,KAChB,UAAU,CAAC,KAAK;YACnB,6BAA6B;YAC7B,MAAM,cAAc,UAAU,KAAK,CAAC,MAA0B,IAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,KAAK,SAAS;YAC9G,IAAI,aAAa;gBACf,WAAW;gBACX,MAAM,SAAS,IAAI,CAAC,SAAS,MAAM,CAAC;oBAAE,QAAQ,OAAO;gBAAQ,GAAG,EAAE,CAAC,MAAM,YAAY,EAAE;YACzF,OAAO;gBACL,cAAc;gBACd,MAAM,SAAS,IAAI,CAAC,SAAS,MAAM,CAAC;oBAAC;wBAAE;wBAAM,QAAQ,OAAO;oBAAQ;iBAAE;YACxE;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;IACpD;AACF;AAGO,eAAe;IAOpB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,sBACL,MAAM,CAAC,uEACP,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM,GACvC,KAAK,CAAC;QACT,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mCAAmC;YACjD,0CAA0C;YAC1C,wCAAmC;gBAChC,OAAe,6BAA6B,GAAG;YAClD;YACA,OAAO,EAAE;QACX;QACA,qCAAqC;QACrC,OAAO,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC,MAAa,CAAC;gBACrC,YAAY,IAAI,UAAU;gBAC1B,MAAM,IAAI,KAAK,EAAE,QAAQ;gBACzB,MAAM,IAAI,IAAI;gBACd,QAAQ,IAAI,MAAM;gBAClB,WAAW,IAAI,SAAS,IAAI;YAC9B,CAAC;IACH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAC5D,OAAO,EAAE;IACX;AACF;AAGO,eAAe,yBAAyB,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAA4F;IACvK,IAAI;QACF,wBAAwB;QACxB,IAAI,OAAO,IAAI,UAAU,CAAC,KAAK,KAAK,UAAU,CAAC,MAAM,KAAK,UAAU,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK;QAC/F,qBAAqB;QACrB,IAAI,UAAyB;QAC7B,IAAI,aAAqB;QACzB,MAAM,EAAE,MAAM,SAAS,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,SAClD,IAAI,CAAC,SACL,MAAM,CAAC,cACP,EAAE,CAAC,QAAQ,MACX,KAAK,CAAC;QACT,IAAI,CAAC,aAAa,UAAU,MAAM,KAAK,GAAG;YACxC,IAAI,SAAS,WAAW;gBACtB,+BAA+B;gBAC/B,MAAM,EAAE,MAAM,UAAU,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SACpD,IAAI,CAAC,SACL,MAAM,CAAC;oBAAC;wBAAE;wBAAM,QAAQ,OAAO;oBAAQ;iBAAE,EACzC,MAAM,CAAC,MACP,MAAM;gBACT,IAAI,eAAe,CAAC,YAAY;oBAC9B,OAAO;wBAAE,OAAO;oBAA8B;gBAChD;gBACA,UAAU,WAAW,EAAE;gBACvB,aAAa,OAAO;YACtB,OAAO;gBACL,OAAO;oBAAE,OAAO;gBAA4B;YAC9C;QACF,OAAO;YACL,UAAU,SAAS,CAAC,EAAE,CAAC,EAAE;YACzB,aAAa,SAAS,CAAC,EAAE,CAAC,MAAM;YAChC,IAAI,SAAS,UAAU;gBACrB,cAAc;YAChB,OAAO,IAAI,SAAS,SAAS;gBAC3B,IAAI,SAAS,CAAC,EAAE,CAAC,MAAM,GAAG,QAAQ;oBAChC,OAAO;wBAAE,OAAO;oBAA8B;gBAChD;gBACA,cAAc;YAChB,OAAO,IAAI,SAAS,WAAW;gBAC7B,aAAa;YACf;YACA,0CAA0C;YAC1C,MAAM,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,SACL,MAAM,CAAC;gBAAE,QAAQ;YAAW,GAC5B,EAAE,CAAC,MAAM;YACZ,IAAI,aAAa;gBACf,OAAO;oBAAE,OAAO;gBAAuC;YACzD;QACF;QACA,+BAA+B;QAC/B,MAAM,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,SACjC,IAAI,CAAC,sBACL,MAAM,CAAC;YAAE,UAAU;YAAS;YAAM;YAAQ;QAAU;QACvD,IAAI,YAAY;YACd,OAAO;gBAAE,OAAO;YAAoC;QACtD;QACA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,OAAO;YAAE,OAAO;QAAgC;IAClD;AACF","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Eidsheim/Kopi%20av%20driftig%2010.04.25/.ssh/driftig/src/services/hmsService.ts"],"sourcesContent":["// src/services/hmsService.ts\r\nimport { supabase } from '@/lib/supabase'; // Assuming your Supabase client is exported from here\r\nimport { ChecklistTemplate, ChecklistTemplateWithItems, Checklist, ChecklistItem, CreateChecklistInstanceResult } from '@/types/hms'; // Import the types\r\n\r\n\r\n/**\r\n * Fetches active checklist templates (for the 'New Checklist' modal and main HMS page).\r\n */\r\nexport const getActiveChecklistTemplates = async (): Promise<ChecklistTemplate[]> => {\r\n  console.log('hmsService: Fetching active checklist templates...');\r\n  const { data, error } = await supabase\r\n    .from('checklist_templates')\r\n    .select('id, created_at, name, description') // Select created_at as well\r\n    .eq('is_active', true)\r\n    .order('name');\r\n\r\n  if (error) {\r\n    console.error('Error fetching checklist templates:', error);\r\n    throw new Error('Could not fetch checklist templates.');\r\n  }\r\n  // Explicitly cast the data to the expected type\r\n  return data as ChecklistTemplate[] || [];\r\n};\r\n\r\n/**\r\n * Fetches a specific checklist template along with its items.\r\n * Used when starting a new checklist.\r\n */\r\nexport const getTemplateWithItems = async (templateId: string): Promise<ChecklistTemplateWithItems | null> => {\r\n  console.log(`hmsService: Fetching template with items for ID: ${templateId}`);\r\n  const { data, error } = await supabase\r\n    .from('checklist_templates')\r\n    .select(`\r\n      id,\r\n      created_at, // Select created_at\r\n      name,\r\n      description,\r\n      checklist_template_items ( id, item_text, item_order )\r\n    `)\r\n    .eq('id', templateId)\r\n    .eq('is_active', true)\r\n    .order('item_order', { referencedTable: 'checklist_template_items', ascending: true })\r\n    .maybeSingle(); // Use maybeSingle() as the ID might not exist\r\n\r\n  if (error) {\r\n    console.error('Error fetching template with items:', error);\r\n    throw new Error('Could not fetch template details.');\r\n  }\r\n  // Explicitly cast the data to the expected type\r\n  return data as ChecklistTemplateWithItems | null;\r\n};\r\n\r\n/**\r\n * Fetches existing checklist instances (for the listing page).\r\n * Includes joined data like template name and user name.\r\n */\r\nexport const getChecklists = async (): Promise<Checklist[]> => {\r\n  console.log('hmsService: Fetching checklists...');\r\n  // Example using joins (adjust table/column names as needed):\r\n  const { data, error } = await supabase\r\n    .from('checklists')\r\n    .select(`\r\n      id,\r\n      created_at,\r\n      completed_at,\r\n      status,\r\n      template_id, // Include template_id\r\n      user_id, // Include user_id\r\n      template:checklist_templates ( name, description ),\r\n      user:profiles ( full_name ) -- Assuming a 'profiles' table linked to auth.users\r\n      -- department:departments ( name ) -- Optional join if department is linked to checklist or user\r\n    `)\r\n    .order('created_at', { ascending: false });\r\n\r\n  if (error) {\r\n    console.error('Error fetching checklists:', error);\r\n    throw new Error('Could not fetch checklists.');\r\n  }\r\n\r\n  // Map the data to the expected Checklist structure and explicitly cast\r\n  const mappedData: Checklist[] = data?.map((item: any) => ({ // Use 'any' temporarily if join structure is complex\r\n    id: item.id,\r\n    template_id: item.template_id,\r\n    user_id: item.user_id,\r\n    template_name: item.template?.name || 'Ukjent Mal',\r\n    template_description: item.template?.description || null,\r\n    created_by_name: item.user?.full_name || 'Ukjent Bruker',\r\n    // department_name: item.department?.name || undefined, // Uncomment if department join is added\r\n    created_at: item.created_at,\r\n    completed_at: item.completed_at,\r\n    status: item.status as 'Påbegynt' | 'Fullført',\r\n  })) as Checklist[] || []; // Explicitly cast the mapped array\r\n\r\n  return mappedData;\r\n};\r\n\r\n\r\n/**\r\n * Creates a new checklist instance and its associated items.\r\n * This should ideally be done in a transaction or an RPC function in Supabase\r\n * to ensure atomicity (either all records are created or none).\r\n */\r\nexport const createChecklistInstance = async (\r\n    templateId: string,\r\n    userId: string, // Need the user ID to associate the checklist\r\n    itemStatus: Record<string, boolean> // { template_item_id: is_checked }\r\n): Promise<CreateChecklistInstanceResult> => {\r\n    console.log(`hmsService: Creating checklist instance for template ${templateId} by user ${userId}`);\r\n\r\n    // Assumes an RPC function `create_new_checklist` exists in Supabase\r\n    // that handles creating the checklist and its items transactionally.\r\n    // The function would take template_id, user_id, and an array/json of items.\r\n\r\n    const itemsPayload = Object.entries(itemStatus).map(([template_item_id, is_checked]) => ({\r\n        template_item_id,\r\n        is_checked,\r\n        // comment: null // Add comments if your UI supports them\r\n    }));\r\n\r\n    const { data, error } = await supabase.rpc('create_new_checklist', {\r\n        p_template_id: templateId,\r\n        p_user_id: userId,\r\n        p_items: itemsPayload\r\n    });\r\n\r\n    if (error) {\r\n        console.error('Error calling create_new_checklist RPC:', error);\r\n        return { success: false, checklistId: null, error: 'Database error during checklist creation.' }; // Include checklistId: null\r\n    }\r\n\r\n    // Assuming the RPC returns an object with a checklist_id field\r\n    if (!data || typeof data !== 'object' || !('checklist_id' in data) || !data.checklist_id) {\r\n         console.error('RPC create_new_checklist did not return expected checklist_id', data);\r\n         return { success: false, checklistId: null, error: 'Failed to retrieve new checklist ID after creation.' }; // Include checklistId: null\r\n    }\r\n\r\n    console.log('Successfully created checklist with ID:', data.checklist_id);\r\n    return { success: true, checklistId: data.checklist_id as string, error: null }; // Include error: null\r\n};\r\n\r\n/**\r\n * Fetches a single checklist instance along with its items and related template/user data.\r\n */\r\nexport const getChecklistWithItems = async (checklistId: string): Promise<(Checklist & { checklist_items: (ChecklistItem & { item_text?: string })[] }) | null> => {\r\n  console.log(`hmsService: Fetching checklist with items for ID: ${checklistId}`);\r\n  const { data, error } = await supabase\r\n    .from('checklists')\r\n    .select(`\r\n      id,\r\n      created_at,\r\n      completed_at,\r\n      status,\r\n      template_id,\r\n      user_id,\r\n      template:checklist_templates ( name, description ),\r\n      user:profiles ( full_name ),\r\n      checklist_items (\r\n        id,\r\n        template_item_id,\r\n        is_checked,\r\n        comment,\r\n        created_at,\r\n        template_item:checklist_template_items ( item_text )\r\n      )\r\n    `)\r\n    .eq('id', checklistId)\r\n    .maybeSingle();\r\n\r\n  if (error) {\r\n    console.error('Error fetching checklist with items:', error);\r\n    throw new Error('Could not fetch checklist details.');\r\n  }\r\n\r\n  if (!data) {\r\n    return null;\r\n  }\r\n\r\n  // Map the data to the expected ChecklistWithItems structure, including item_text\r\n  const mappedData: Checklist & { checklist_items: (ChecklistItem & { item_text?: string })[] } = {\r\n    id: data.id,\r\n    template_id: data.template_id,\r\n    user_id: data.user_id,\r\n    template_name: (data as any).template?.name || 'Ukjent Mal',\r\n    template_description: (data as any).template?.description || null,\r\n    created_by_name: (data as any).user?.full_name || 'Ukjent Bruker',\r\n    created_at: data.created_at,\r\n    completed_at: data.completed_at,\r\n    status: data.status as 'Påbegynt' | 'Fullført',\r\n    checklist_items: ((data as any).checklist_items || []).map((item: any) => ({\r\n      ...item,\r\n      item_text: item.template_item?.item_text || undefined,\r\n    })),\r\n  };\r\n\r\n  return mappedData;\r\n};\r\n\r\n/**\r\n * Deletes a checklist instance and its associated items.\r\n * This should ideally be done in a transaction or an RPC function in Supabase\r\n * to ensure atomicity.\r\n */\r\nexport const deleteChecklist = async (checklistId: string): Promise<{ success: boolean; error?: string }> => {\r\n  console.log(`hmsService: Deleting checklist with ID: ${checklistId}`);\r\n\r\n  // Ideally, use an RPC function that handles deleting checklist items first\r\n  // and then the checklist itself within a transaction.\r\n  // Example using separate deletes (less ideal):\r\n\r\n  // 1. Delete associated checklist items\r\n  const { error: deleteItemsError } = await supabase\r\n    .from('checklist_items')\r\n    .delete()\r\n    .eq('checklist_id', checklistId);\r\n\r\n  if (deleteItemsError) {\r\n    console.error('Error deleting checklist items:', deleteItemsError);\r\n    return { success: false, error: 'Could not delete associated checklist items.' };\r\n  }\r\n\r\n  // 2. Delete the checklist\r\n  const { error: deleteChecklistError } = await supabase\r\n    .from('checklists')\r\n    .delete()\r\n    .eq('id', checklistId);\r\n\r\n  if (deleteChecklistError) {\r\n    console.error('Error deleting checklist:', deleteChecklistError);\r\n    // Note: If the items deletion succeeded but checklist deletion fails,\r\n    // you'll have orphaned items unless using a transaction/RPC.\r\n    return { success: false, error: 'Could not delete the checklist.' };\r\n  }\r\n\r\n  console.log(`Successfully deleted checklist with ID: ${checklistId}`);\r\n  return { success: true };\r\n};\r\n\r\n\r\n// TODO: Add functions for updating checklists/items if needed\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Eidsheim/Kopi%20av%20driftig%2010.04.25/.ssh/driftig/src/app/hms/sjekklister/ny/page.tsx"],"sourcesContent":["\r\n// src/app/hms/sjekklister/ny/page.tsx\r\n'use client'; // Required for state and event handlers\r\n\r\n// src/app/hms/sjekklister/ny/page.tsx\r\n'use client'; // Required for state and event handlers\r\n\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\nimport { useSearchParams, useRouter } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { getTemplateWithItems, createChecklistInstance } from '@/services/hmsService'; // Import service functions\r\nimport { ChecklistTemplateWithItems, CreateChecklistInstanceResult } from '@/types/hms'; // Import types\r\nimport { supabase } from '@/lib/supabase'; // Import supabase client\r\n\r\n\r\nfunction NewChecklistContent() {\r\n  const searchParams = useSearchParams();\r\n  const router = useRouter();\r\n  const templateId = searchParams.get('templateId'); // Get templateId from URL query params\r\n\r\n  const [template, setTemplate] = useState<ChecklistTemplateWithItems | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [itemStatus, setItemStatus] = useState<Record<string, boolean>>({}); // { template_item_id: is_checked }\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');\r\n  const [savedTime, setSavedTime] = useState<string | null>(null);\r\n  const [userId, setUserId] = useState<string | null>(null); // State to store the logged-in user's ID\r\n\r\n  useEffect(() => {\r\n    // Fetch user ID\r\n    const fetchUser = async () => {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (user) {\r\n        setUserId(user.id);\r\n      } else {\r\n        // Handle case where user is not logged in, maybe redirect to login\r\n        setError('Bruker ikke logget inn.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n\r\n    if (!templateId) {\r\n      setError('Ingen sjekkliste-mal ID funnet i URL.');\r\n      setLoading(false);\r\n      // Consider redirecting back to the list page if no ID is provided\r\n      // router.push('/hms/sjekklister');\r\n      return;\r\n    }\r\n\r\n    const fetchTemplate = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      setSubmitStatus('idle');\r\n      try {\r\n        const fetchedTemplate = await getTemplateWithItems(templateId); // Use imported function\r\n        if (fetchedTemplate) {\r\n          setTemplate(fetchedTemplate);\r\n          const initialStatus: Record<string, boolean> = {};\r\n          fetchedTemplate.checklist_template_items.forEach(item => {\r\n            initialStatus[item.id] = false; // Default all items to unchecked\r\n          });\r\n          setItemStatus(initialStatus);\r\n        } else {\r\n          setError(`Kunne ikke finne sjekkliste-mal med ID: ${templateId}.`);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching template:\", err);\r\n        setError('Feil ved lasting av sjekkliste-mal.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTemplate();\r\n  }, [templateId, router]); // Add userId to dependency array if fetching template depends on user\r\n\r\n  const handleCheckboxChange = (templateItemId: string) => {\r\n    setItemStatus(prevStatus => ({\r\n      ...prevStatus,\r\n      [templateItemId]: !prevStatus[templateItemId],\r\n    }));\r\n     setSubmitStatus('idle'); // Reset submit status if user makes changes after save attempt\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!templateId || !template || !userId) { // Ensure userId is available\r\n        setError('Kan ikke lagre sjekklisten: Mal, ID eller brukerinformasjon mangler.');\r\n        setSubmitStatus('error');\r\n        return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    setSubmitStatus('idle');\r\n    setError(null); // Clear previous errors\r\n\r\n    try {\r\n      const result: CreateChecklistInstanceResult = await createChecklistInstance(templateId, userId, itemStatus); // Use actual userId\r\n\r\n      if (result.success && result.checklistId) {\r\n        setSubmitStatus('success');\r\n        setSavedTime(new Date().toLocaleTimeString('nb-NO', { hour: '2-digit', minute: '2-digit' }));\r\n        // Redirect after a short delay to show success message\r\n        setTimeout(() => {\r\n           router.push('/hms/sjekklister'); // Redirect to the list page\r\n        }, 1500);\r\n      } else {\r\n        setSubmitStatus('error');\r\n        setError(result.error || 'Kunne ikke lagre sjekklisten. Prøv igjen.'); // Display error from service if available\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error submitting checklist:\", err);\r\n      setSubmitStatus('error');\r\n      setError('En uventet feil oppstod under lagring.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (loading || userId === null) { // Show loading while fetching user as well\r\n    return <div className=\"container mx-auto p-4\">Laster sjekkliste...</div>;\r\n  }\r\n\r\n  if (error && (!template || userId === undefined)) { // Show error prominently if template couldn't load or user is not found\r\n    return <div className=\"container mx-auto p-4 text-red-600\">{error}</div>;\r\n  }\r\n\r\n  if (!template) {\r\n     // This case might occur if templateId is invalid but fetch didn't throw error\r\n    return <div className=\"container mx-auto p-4\">Fant ikke sjekkliste-malen. Sjekk om IDen i URLen er korrekt.</div>;\r\n  }\r\n\r\n  // Determine if all items are checked (optional, for validation or UI feedback)\r\n  // const allChecked = Object.values(itemStatus).every(status => status);\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      {/* Breadcrumbs */}\r\n      <nav className=\"text-sm text-gray-500 mb-4\">\r\n        <Link href=\"/hms\" className=\"hover:underline\">Hjem</Link> /\r\n        <Link href=\"/hms/sjekklister\" className=\"hover:underline\"> Sjekklister</Link> /\r\n        <span className=\"text-gray-700\"> Ny</span>\r\n      </nav>\r\n\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h1 className=\"text-2xl font-semibold\">Ny sjekkliste</h1>\r\n        {submitStatus === 'success' && savedTime && <span className=\"text-green-600 font-medium\">Lagret kl. {savedTime} ✓</span>}\r\n      </div>\r\n\r\n      {/* Description */}\r\n      {template.description && (\r\n        <p className=\"text-gray-600 mb-6 bg-gray-50 p-3 rounded border border-gray-200\">{template.description}</p>\r\n      )}\r\n\r\n      {/* Checklist Items Section */}\r\n      <div className=\"bg-white shadow-md rounded-lg overflow-hidden border border-gray-200\">\r\n        {/* Section Header */}\r\n        <div className=\"bg-teal-600 text-white p-4\">\r\n          <h2 className=\"text-xl font-semibold\">{template.name}</h2>\r\n        </div>\r\n\r\n        {/* Items List */}\r\n        <ul className=\"divide-y divide-gray-200\">\r\n          {template.checklist_template_items.map((item, index) => (\r\n            <li key={item.id} className=\"p-4 flex items-center justify-between hover:bg-teal-50 transition-colors duration-150\">\r\n              <div className=\"flex items-center flex-grow mr-4\">\r\n                <span className=\"text-gray-500 w-8 text-right mr-4 flex-shrink-0\">{index + 1}</span>\r\n                {/* Make the label clickable */}\r\n                <label htmlFor={`item-${item.id}`} className=\"flex-grow cursor-pointer text-gray-800\">\r\n                  {item.item_text}\r\n                </label>\r\n              </div>\r\n              {/* Checkbox aligned to the right */}\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`item-${item.id}`}\r\n                checked={itemStatus[item.id] || false}\r\n                onChange={() => handleCheckboxChange(item.id)}\r\n                className=\"form-checkbox h-5 w-5 text-teal-600 rounded border-gray-300 focus:ring-teal-500 focus:ring-offset-0 focus:ring-2 cursor-pointer flex-shrink-0\"\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n       {/* Submission Error Message */}\r\n       {submitStatus === 'error' && error && (\r\n         <div className=\"mt-4 text-red-600 bg-red-50 p-3 rounded border border-red-200\">{error}</div>\r\n       )}\r\n\r\n      {/* Action Button */}\r\n      <div className=\"mt-6 text-right\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          disabled={isSubmitting || submitStatus === 'success'} // Disable after successful save\r\n          className={`bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-opacity duration-150 ${\r\n            isSubmitting || submitStatus === 'success' ? 'opacity-50 cursor-not-allowed' : ''\r\n          }`}\r\n        >\r\n          {isSubmitting ? 'Lagrer...' : '✅ FERDIGSTILL'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// Wrap the component that uses useSearchParams with Suspense\r\n// This is necessary for Next.js App Router when reading search params in client components\r\nconst NewChecklistPage = () => {\r\n  return (\r\n    <Suspense fallback={<div className=\"container mx-auto p-4\">Laster...</div>}>\r\n      <NewChecklistContent />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\n\r\nexport default NewChecklistPage;\r\n"],"names":[],"mappings":"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","debugId":null}}]
}